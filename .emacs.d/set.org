* UI
** Скобочки
   Paren-mode - парные скобки.
   electric - автотабулиция и автопарные скобки
   #+BEGIN_SRC emacs-lisp
   (show-paren-mode 2)
   (electric-pair-mode 1)
   (electric-indent-mode 1)
   #+END_SRC
** Рамка
   Установка режима рамки окна emacs
   #+BEGIN_SRC emacs-lisp
	 (setq frame-title-format "GNU Emacs: %b")
   #+END_SRC
** Отключение графических элементов
   Меню и скроллбары
   #+BEGIN_SRC emacs-lisp
   (menu-bar-mode -1)
   (tool-bar-mode -1)
   (scroll-bar-mode -1)
   #+END_SRC
** Шрифт и тема
   Jetbrains Mono
   #+BEGIN_SRC emacs-lisp
   '(default ((t (:family "JetBrains Mono" :foundry "JB" :slant normal :weight normal :height 98 :width normal))))
   (load-theme 'afternoon t)
   #+END_SRC
** Отсутпы
   #+BEGIN_SRC emacs-lisp
   ;;(setq-default indent-tabs-mode nil) ;; отключить возможность ставить отступы TAB'ом
   (setq-default tab-width 4) ;; ширина табуляции - 4 пробельных символа
   (setq-default c-basic-offset 4)
   (setq-default standart-indent 4) ;; стандартная ширина отступа - 4 пробельных символа
   (setq-default lisp-body-indent 4) ;; сдвигать Lisp-выражения на 4 пробельных символа
   (global-set-key (kbd "RET") 'newline-and-indent) ;; при нажатии Enter перевести каретку и сделать отступ
   (setq lisp-indent-function  'common-lisp-indent-function)
   #+END_SRC
** Нумерация строк
   Нумерация включена для всех программных модов
   #+BEGIN_SRC emacs-lisp
   (add-hook 'prog-mode-hook #'display-line-numbers-mode)
   #+END_SRC
* Plugins
package иницилизируется в .emacs
** Ido
   Удобная подсказка в exo
   #+BEGIN_SRC emacs-lisp
   (require 'ido)
   (ido-mode t)
   (setq ido-enable-flex-matching t)
   #+END_SRC
** Bookmark
   Закладки по тексту
   #+BEGIN_SRC emacs-lisp
   (require 'bookmark)
   (global-set-key (kbd "<f12>") 'bookmark-bmenu-list)
   (global-set-key (kbd "C-<f12>") 'bookmark-set)
   (global-set-key (kbd "S-<f12>") 'bookmark-jump)

   (setq bookmark-save-flag t)
   (when (file-exists-p (concat user-emacs-directory "bookmarks"))
   		(bookmark-load bookmark-default-file t))

   (setq bookmark-default-file (concat user-emacs-directory "bookmarks"))
   #+END_SRC
** Bs
   Браузер файлов. Бинд на <f2>
   #+BEGIN_SRC emacs-lisp
   (require 'bs)
   (global-set-key (kbd "<f2>") 'bs-show)
   #+END_SRC
** Neotree
   Файловый браузер на <f1>
   #+BEGIN_SRC emacs-lisp
   (require 'neotree)
   (global-set-key (kbd "<f1>") 'neotree-toggle)
   '(neo-dir-link-face ((t nil)))
   #+END_SRC
** Yasnippet
   Снипеты дополнений для разных режимов
   #+BEGIN_SRC emacs-lisp
   (require 'yasnippet)
   (yas-reload-all)
   (add-hook 'prog-mode-hook #'yas-minor-mode)
   (add-hook 'org-mode-hook #'yas-minor-mode)
   #+END_SRC
** Iedit
   Рефакторинг на C-;
   #+BEGIN_SRC emacs-lisp
   (require 'iedit)
   #+END_SRC
** Comapny
   Автодополнение
   #+BEGIN_SRC emacs-lisp
   (require 'company)
   (add-hook 'after-init-hook 'global-company-mode)
   #+END_SRC
** Lsp
   Реализация протокола языков для emacs
   #+BEGIN_SRC emacs-lisp
   (require 'lsp-mode)
   #+END_SRC
*** C-C++
	#+BEGIN_SRC emacs-lisp
	(add-hook 'c-mode-hook #'lsp)
	(add-hook 'c++-mode-hook #'lsp)
	#+END_SRC
*** Python
	#+BEGIN_SRC emacs-lisp
	(require 'lsp-python-ms)
	(setq lsp-python-ms-auto-install-server t)
	(add-hook 'python-mode-hook #'lsp)
	#+END_SRC
*** Java
	#+BEGIN_SRC emacs-lisp
	(require 'lsp-java)
	(add-hook 'java-mode-hook #'lsp)
	#+END_SRC
** Flycheck
   Проверка синтаксиса
   #+BEGIN_SRC emacs-lisp
   (require 'flycheck)
   (global-flycheck-mode)
   #+END_SRC
** Tramp
   Удалённый доступ к ssh
   #+BEGIN_SRC emacs-lisp
   (require 'tramp)
   (setq tramp-default-method "ssh")
   #+END_SRC
** Ediprolog
   Выполнение кода prolog по нажатию f9
   #+BEGIN_SRC emacs-lisp
   (require 'ediprolog)
   (global-set-key (kbd "<f9>") 'ediprolog-dwim)
   #+END_SRC
* Другие настройки
** Отключение бекапов
   #+BEGIN_SRC emacs-lisp
   (setq make-backup-files nil)
   (setq auto-save-list-file-name nil)
   (setq auto-save-default nil)
   #+END_SRC
** Общий буфер обмена
   #+BEGIN_SRC emacs-lisp
   (setq x-select-enable-clipboard t)
   #+END_SRC
** Проверка ошибок
   #+BEGIN_SRC emacs-lisp
	 (add-hook 'text-mode-hook #'flyspell-mode)
	 (with-eval-after-load "ispell"
		 (setq ispell-program-name "hunspell")
		 (setq ispell-dictionary "en_US,ru_RU")
		 (ispell-set-spellchecker-params)
		 (ispell-hunspell-add-multi-dic "en_US,ru_RU")
		 '(progn
		   (define-key flyspell-mouse-map [down-mouse-3] #'flyspell-correct-word)
		   (define-key flyspell-mouse-map [mouse-3] #'undefined))
		 )
   #+END_SRC

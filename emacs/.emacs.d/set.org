* UI
** Скобочки
   Paren-mode - парные скобки.
   electric - автотабулиция и автопарные скобки
   #+BEGIN_SRC emacs-lisp
   (show-paren-mode 2)
   (electric-pair-mode 1)
   (electric-indent-mode 1)
   #+END_SRC
** Рамка
   Установка режима рамки окна emacs
   #+BEGIN_SRC emacs-lisp
	 (setq frame-title-format "GNU Emacs: %b")
   #+END_SRC
** Отключение графических элементов
   Меню и скроллбары
   #+BEGIN_SRC emacs-lisp
   (menu-bar-mode -1)
   (tool-bar-mode -1)
   (scroll-bar-mode -1)
   (setq inhibit-startup-screen t)
   #+END_SRC
** Шрифт и тема
   Jetbrains Mono
   Темы: afternoon, cherry-blossom
   #+BEGIN_SRC emacs-lisp
     '(default ((t (:family "JetBrains Mono" :foundry "JB" :slant normal :weight normal :height 98 :width normal))))
     (load-theme 'cherry-blossom t)
   #+END_SRC
** Отступы
   #+BEGIN_SRC emacs-lisp
	 (setq-default tab-width 4)
	 (setq-default c-basic-offset 4)
	 (setq-default standart-indent 4)
	 (setq-default lisp-body-indent 4)
	 (setq backward-delete-char-untabify-method 'hungry)
	 (setq lisp-indent-function  'common-lisp-indent-function)
   #+END_SRC
** Нумерация строк
   Нумерация включена для всех программных модов
   #+BEGIN_SRC emacs-lisp
   (add-hook 'prog-mode-hook #'display-line-numbers-mode)
   #+END_SRC
* Plugins
package иницилизируется в .emacs
** Ivy
   Более удобное exo и другие плюшки
   #+BEGIN_SRC emacs-lisp
	 (ivy-mode 1)
	 (setq ivy-use-virtual-buffers t)
	 (setq enable-recursive-minibuffers t)
   #+END_SRC
*** Swiper
	Прокаченный поиск через ivy
	#+BEGIN_SRC emacs-lisp
	(global-set-key "\C-s" 'swiper)
	(global-set-key (kbd "C-c C-r") 'ivy-resume)
	#+END_SRC
*** Counsel
	Улучшение для стандартных команд + 
	#+BEGIN_SRC emacs-lisp
	  (global-set-key (kbd "M-x") 'counsel-M-x)
	  (global-set-key (kbd "C-x C-f") 'counsel-find-file)
	  (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)

	  (global-set-key (kbd "<f1> f") 'counsel-describe-function)
	  (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
	  (global-set-key (kbd "<f1> o") 'counsel-describe-symbol)
	  (global-set-key (kbd "<f1> l") 'counsel-find-library)	  
	  (global-set-key (kbd "<f1> b") 'counsel-descbinds)


	  (global-set-key (kbd "<f2>") 'counsel-imenu)
	  (global-set-key (kbd "<f12>") 'counsel-bookmark)
	#+END_SRC
**** counsel-tramp
	 Подключение counsel к tramp
	 #+BEGIN_SRC emacs-lisp
	 (define-key global-map (kbd "C-c s") 'counsel-tramp)
	 #+END_SRC
**** counsel-projectile
	 Подключение counsel к projectile
	 #+BEGIN_SRC emacs-lisp
	 (counsel-projectile-mode 1)
	 #+END_SRC

** Bookmark
   Закладки по тексту
   #+BEGIN_SRC emacs-lisp
   (require 'bookmark)
   
   (setq bookmark-save-flag t)
   (when (file-exists-p (concat user-emacs-directory "bookmarks"))
   		(bookmark-load bookmark-default-file t))

   (setq bookmark-default-file (concat user-emacs-directory "bookmarks"))
   #+END_SRC
** Org-mode
   #+BEGIN_SRC emacs-lisp
		  (setq org-src-fontify-natively t)

		  (setq org-agenda-files '("~/.todo"))

		  (setq calendar-week-start-day 1
				calendar-day-name-array ["Воскресенье" "Понедельник" "Вторник" "Среда" 
													   "Четверг" "Пятница" "Суббота"]
				calendar-day-header-array ["Вс" "Пн" "Вт" "Ср" "Чт" "Пт" "Сб"]
				calendar-day-abbrev-array ["Вск" "Пнд" "Втр" "Сре" "Чтв" "Птн" "Суб"]
				calendar-month-name-array ["Январь" "Февраль" "Март" "Апрель" "Май" 
													"Июнь" "Июль" "Август" "Сентябрь"
													"Октябрь" "Ноябрь" "Декабрь"]
				calendar-month-abbrev-array ["Янв" "Фев" "Мар" "Апр" "Май" "Июн" "Июл" "Авг" "Сен" "Окт" "Ноя" "Дек"])


		  (global-set-key (kbd "C-c a") 'org-agenda)
		  (setq org-log-done t)

		  (setq org-format-latex-options 
				'(:foreground default :background default :scale 1.4
				  :html-foreground "Black" :html-background "Transparent"
				  :html-scale 1.0 :matchers
				  ("begin" "$1" "$" "$$" "\\(" "\\[")))
   #+END_SRC
** All-the-icons
   Иконки для других модов
   #+BEGIN_SRC emacs-lisp
   (require 'all-the-icons)
   #+END_SRC
*** all-the-icons-dired
	Иконки в dired
	#+BEGIN_SRC emacs-lisp
	(add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
	#+END_SRC
** Neotree
   Файловый браузер на <f1>
   #+BEGIN_SRC emacs-lisp
   (require 'neotree)
   (global-set-key (kbd "<f5>") 'neotree-toggle)
   (setq neo-smart-open t)
   (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
   #+END_SRC
** Yasnippet
   Снипеты дополнений для разных режимов
   #+BEGIN_SRC emacs-lisp
   (require 'yasnippet)
   (yas-reload-all)
   (add-hook 'prog-mode-hook #'yas-minor-mode)
   (add-hook 'org-mode-hook #'yas-minor-mode)
   #+END_SRC
** Dired
   #+BEGIN_SRC emacs-lisp
	 (setq dired-listing-switches "-agho --group-directories-first")
   #+END_SRC
** Lsp
   Реализация протокола языков для emacs
   #+BEGIN_SRC emacs-lisp
   (require 'lsp-mode)
   #+END_SRC
*** lsp-ui
	Графический интерфейс для lsp
	#+BEGIN_SRC emacs-lisp
	  (lsp-ui-mode t)
	  (define-key lsp-ui-mode-map [remap xref-find-definitions] #'lsp-ui-peek-find-definitions)
	  (define-key lsp-ui-mode-map [remap xref-find-references] #'lsp-ui-peek-find-references)

	  (setq lsp-ui-doc-delay 3)
	  (setq lsp-ui-doc-position 'at-point)
	#+END_SRC
*** dap-mode
	Дебагер 
	Для java дебагер поставляется lsp-java
	#+BEGIN_SRC emacs-lisp
	  (require 'dap-mode)
	#+END_SRC
**** C-C++
	 #+BEGIN_SRC emacs-lisp
	   (require 'dap-cpptools)
	   (with-eval-after-load "dap-cpptools"
		   (dap-cpptools-setup))
	 #+END_SRC
**** Python
	 Необходим ptvsd.
	 pip install ptvsd
	 #+BEGIN_SRC emacs-lisp
	 (require 'dap-python)
	 #+END_SRC
*** C-C++
	#+BEGIN_SRC emacs-lisp
	(add-hook 'c-mode-hook #'lsp)
	(add-hook 'c++-mode-hook #'lsp)
	#+END_SRC
*** Python
	#+BEGIN_SRC emacs-lisp
	(require 'lsp-python-ms)
	(setq lsp-python-ms-auto-install-server t)
	(add-hook 'python-mode-hook #'lsp)
	#+END_SRC
*** Java
	#+BEGIN_SRC emacs-lisp
	(require 'lsp-java)
	(add-hook 'java-mode-hook #'lsp)
	#+END_SRC
** Flycheck
   Проверка синтаксиса
   #+BEGIN_SRC emacs-lisp
   (require 'flycheck)
   (global-flycheck-mode t)
   #+END_SRC
** Sublimity
   Плавный скроллинг
   #+BEGIN_SRC emacs-lisp
   (require 'sublimity)
   (require 'sublimity-scroll)
   (sublimity-mode 1)
   #+END_SRC
** Company
   Автодополнение
   #+BEGIN_SRC emacs-lisp
	 (require 'company)
	 (add-hook 'after-init-hook 'global-company-mode)
	 (setq company-idle-delay 0)
	 (setq company-minimum-prefix-length 1) 
	 (setq company-selection-wrap-around t)
   #+END_SRC
*** Company-lsp
	#+BEGIN_SRC emacs-lisp
	(require 'company-lsp)
	(push 'company-lsp company-backends)
	#+END_SRC*** 
** Projectile
   Навигация по проектам которые содержат системы контроля версий
   либо файл .projectile
   #+BEGIN_SRC emacs-lisp
   (projectile-mode +1)
   (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
   #+END_SRC
** Tramp
   Использование данной конфигурации emacs 
   для доступа к удалённым серверам
   #+BEGIN_SRC emacs-lisp
   (require 'tramp)
   (setq tramp-default-method "ssh")
   #+END_SRC
** Ediprolog
   Выpполнение кода prolog по нажатию f9
   #+BEGIN_SRC emacs-lisp
	 (require 'ediprolog)

	 (defun edi-set-hook()
		 (local-set-key (kbd "<f9>") 'ediprolog-dwim)
		 (setq ediprolog-group "swi")
		 (setq ediprolog-program "/usr/bin/swipl")
		 (setq ediprolog-system 'swi))

	 (add-hook 'prolog-mode-hook'edi-set-hook)


   #+END_SRC
* Другие настройки
** Отключение бекапов
   #+BEGIN_SRC emacs-lisp
   (setq make-backup-files nil)
   (setq auto-save-list-file-name nil)
   (setq auto-save-default nil)
   #+END_SRC
** Общий буфер обмена
   #+BEGIN_SRC emacs-lisp
   (setq x-select-enable-clipboard t)
   #+END_SRC
** Проверка ошибок
   #+BEGIN_SRC emacs-lisp
	 (add-hook 'text-mode-hook #'flyspell-mode)
	 (with-eval-after-load "ispell"
		 (setq ispell-program-name "hunspell")
		 (ispell-set-spellchecker-params)
		 (ispell-hunspell-add-multi-dic "en_US,ru_RU")
		 (setq ispell-dictionary "en_US,ru_RU")
		 (setq ispell-personal-dictionary "~/.hunspell_personal")
		 )
   #+END_SRC
** Кастомные бинды
   #+BEGIN_SRC emacs-lisp
	 (global-set-key (kbd "C-x O") 'window-swap-states)
   #+END_SRC




* Важные настройки
  В этой секции содержатся настройки, которые необходимо загрузить первыми.
** Отключение бекапов
	#+BEGIN_SRC emacs-lisp
	(setq make-backup-files nil)
	(setq auto-save-list-file-name nil)
	(setq auto-save-default nil)
	#+END_SRC
** Локализация
   #+BEGIN_SRC emacs-lisp
	 (setq calendar-week-start-day 1
		   calendar-day-name-array ["Воскресенье" "Понедельник" "Вторник" "Среда" 
												  "Четверг" "Пятница" "Суббота"]
		   calendar-day-header-array ["Вс" "Пн" "Вт" "Ср" "Чт" "Пт" "Сб"]
		   calendar-day-abbrev-array ["Вск" "Пнд" "Втр" "Сре" "Чтв" "Птн" "Суб"]
		   calendar-month-name-array ["Январь" "Февраль" "Март" "Апрель" "Май" 
											   "Июнь" "Июль" "Август" "Сентябрь"
											   "Октябрь" "Ноябрь" "Декабрь"]
		   calendar-month-abbrev-array ["Янв" "Фев" "Мар" "Апр" "Май" "Июн" "Июл" "Авг" "Сен" "Окт" "Ноя" "Дек"])
   #+END_SRC 
* UI
  В этой секции содержатся настройки графического режима
** Скобочки
   Paren-mode - парные скобки.
   electric - автотабулиция и автопарные скобки
   #+BEGIN_SRC emacs-lisp
   (show-paren-mode 2)
   (electric-pair-mode 1)
   (electric-indent-mode 1)
   #+END_SRC
** Рамка
   Установка режима рамки окна emacs
   #+BEGIN_SRC emacs-lisp
	 (setq frame-title-format "GNU Emacs: %b")
   #+END_SRC
** Шрифт и тема
   Jetbrains Mono
   Темы: afternoon, cherry-blossom
   #+BEGIN_SRC emacs-lisp
	 (use-package doom-themes
	   :init (load-theme 'doom-Iosvkem t)
	   :config 
	   (setq doom-themes-treemacs-theme "doom-colors")
	   (doom-themes-treemacs-config)
	   (doom-themes-org-config))

	 (setq default-frame-alist '((font . "JetBrains Mono-10")))
   #+END_SRC
** Отключение графических элементов
   Меню и скроллбары
   #+BEGIN_SRC emacs-lisp
   (menu-bar-mode -1)
   (tool-bar-mode -1)
   (scroll-bar-mode -1)
   (setq inhibit-startup-screen t)
   (set-fringe-mode 10)
   #+END_SRC
** Отступы
   #+BEGIN_SRC emacs-lisp
	 (setq-default indent-tabs-mode nil)
	 (setq-default tab-width 4)
	 ;; (setq-default c-basic-offset 4)
	 ;; (setq-default standart-indent 4)
	 ;; (setq-default lisp-body-indent 4)
	 (setq backward-delete-char-untabify-method 'hungry)
	 ;;(setq lisp-indent-function  'common-lisp-indent-function)
   #+END_SRC
** Нумерация строк
   Нумерация включена для всех программных модов
   #+BEGIN_SRC emacs-lisp
   (column-number-mode)
   (add-hook 'prog-mode-hook #'display-line-numbers-mode)
   #+END_SRC
* Packages
  В этой секции содержатся настройки пакетов
  package и use-package инициализируются в [[file:~/.Dotfiles/emacs/.emacs][.emacs]]
** Ivy
   Более удобное exo и другие плюшки
   #+BEGIN_SRC emacs-lisp
     (use-package ivy
       :config (ivy-mode t))
   #+END_SRC
*** Swiper
	Прокаченный поиск через ivy
	#+BEGIN_SRC emacs-lisp
	  (use-package swiper
		  :after ivy
		  :bind ("C-s" . swiper)
		  ("C-c C-r" . ivy-resume))
	#+END_SRC
*** Counsel
	Улучшение для стандартных команд + 
	#+BEGIN_SRC emacs-lisp
	  (use-package counsel
		  :after ivy
		  :bind ("M-x" . counsel-M-x)
		  ("C-x C-f" . counsel-find-file)
		  ("<f1> f" . counsel-describe-function)
		  ("<f1> v" . counsel-describe-variable)
		  ("<f1> o" . counsel-describe-symbol)
		  ("<f1> l" . counsel-find-library)	  
		  ("<f1> b" . counsel-descbinds)

		  ("<f2>" . counsel-org-capture) 
		  ("<f5>" . counsel-imenu)
		  ("<f12>" . counsel-bookmark)
		  (:map minibuffer-local-map ("C-r" . counsel-minibuffer-history)))
	#+END_SRC
**** counsel-tramp
	 Подключение counsel к tramp
	 #+BEGIN_SRC emacs-lisp
	   (use-package counsel-tramp
		   :after tramp)
	 #+END_SRC
*** ivy-hydra
	Удобно для выбора нескольких вариантов в lsp.
	C-o - m(ark)
	#+BEGIN_SRC emacs-lisp
	  (use-package ivy-hydra)
	#+END_SRC
*** ivy-rich
	ivy буферы в виде таблицы.
    #+BEGIN_SRC emacs-lisp
		(use-package ivy-rich
	  :after ivy
	  :config (ivy-rich-mode 1)
	  ;;(ivy-rich-project-root-cache-mode t)
      )
    #+END_SRC
** Bookmark
   Закладки по тексту (встроенный)
   #+BEGIN_SRC emacs-lisp
	 (use-package bookmark
		 :ensure nil
		 :init (when (file-exists-p (concat user-emacs-directory "bookmarks"))
				   (bookmark-load bookmark-default-file t))
		 :custom (bookmark-save-flag t)
		 (bookmark-default-file (concat user-emacs-directory "bookmarks")))
   #+END_SRC
** Org-mode
   Конфигурация для org-mode (встроенный)
   #+BEGIN_SRC emacs-lisp
	 (use-package org
		 :ensure nil
		 :bind ("C-c a" . org-agenda)
		 ("C-c c" . org-capture)
		 :custom (org-src-fontify-natively t)
		 (org-agenda-files (directory-files-recursively "~/.todo/" "org$"))
		 (org-default-notes-file "~/.todo/notes.org")

		 (org-log-done t)
		 (org-format-latex-options 
		  '(:foreground default :background default :scale 1.4
			:html-foreground "Black" :html-background "Transparent"
			:html-scale 1.0 :matchers
			("begin" "$1" "$" "$$" "\\(" "\\["))))
   #+END_SRC
*** org-bullets
	#+BEGIN_SRC emacs-lisp
	  (use-package org-superstar
		:hook (org-mode . org-superstar-mode))
	#+END_SRC
** All-the-icons
   Иконки для других пакетов
   #+BEGIN_SRC emacs-lisp
   (use-package all-the-icons)
   #+END_SRC
*** Treemacs-all-the-icons
    #+BEGIN_SRC emacs-lisp
      (use-package treemacs-all-the-icons
	:config (treemacs-load-theme "all-the-icons"))
    #+END_SRC
*** All-the-icons-dired
	#+BEGIN_SRC emacs-lisp
	  (use-package all-the-icons-dired
		  :hook (dired-mode . all-the-icons-dired-mode))
	#+END_SRC
** Yasnippet
   Снипеты дополнений для разных режимов
   #+BEGIN_SRC emacs-lisp
	 (use-package yasnippet
		 :config (yas-reload-all)
		 :hook (prog-mode . yas-minor-mode)
		 (org-mode . yas-minor-mode))
   #+END_SRC
** Dired
   Редактор директорий (встроенный)
   #+BEGIN_SRC emacs-lisp
	 (use-package dired 
		 :ensure nil
		 :custom  (dired-listing-switches "-agho --group-directories-first"))
   #+END_SRC
** Doom-modeline
   Панель режимов из doom emacs
   #+BEGIN_SRC emacs-lisp
	 (use-package doom-modeline
	   :init (doom-modeline-mode 1)
	   :custom (doom-modeline-minor-modes t)
	   (doom-modeline-icon t))
   #+END_SRC
** Lsp
   Реализация протокола языков для emacs
   #+BEGIN_SRC emacs-lisp
     (use-package lsp-mode
         :defer t
         :hook (c-mode . lsp)
         (c++-mode . lsp)
         (python-mode . lsp)
         (java-mode . lsp)
         (lsp-mode . lsp-enable-which-key-integration)
         :custom (lsp-keymap-prefix "C-c l")
         (lsp-idle-delay 0.500)

         (use-package lsp-python-ms
           :custom (lsp-python-ms-auto-install-server))

         (use-package lsp-java))
   #+END_SRC
*** lsp-ui
	Графический интерфейс для lsp
	#+BEGIN_SRC emacs-lisp
	  (use-package lsp-ui
		  :after lsp-mode
		  :config (lsp-ui-mode t)
		  :bind (:map lsp-ui-mode-map (
									   ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
									   ([remap xref-find-references] . lsp-ui-peek-find-references)))
		  :custom (lsp-ui-doc-delay 3)
		  (lsp-ui-doc-position 'at-point))
	#+END_SRC
*** lsp-treemacs
    #+BEGIN_SRC emacs-lisp
        (use-package lsp-treemacs
          :ensure nil
          :commands lsp-treemacs-errors-list
          :config (lsp-treemacs-sync-mode 1))
    #+END_SRC
*** lsp-ivy
	#+BEGIN_SRC emacs-lisp
      (use-package lsp-ivy
        :commands lsp-ivy-workspace-symbol)
	#+END_SRC
*** dap-mode
	Дебагер 
	Для java дебагер поставляется lsp-java
	#+BEGIN_SRC emacs-lisp
      (use-package dap-mode
        :after lsp-mode
        :commands dap-debug
        :hook (dap-terminated. dap-exit-all)
        (lsp-mode . dap-exit-all)
        :config (require 'dap-gdb-lldb)
        (require 'dap-cpptools)
        (require 'dap-python)
        (defun dap-exit-all ()
          (dap-delete-all-sessions)
          (dap-mode nil))
        '(dap-gdb-lldb-setup))
	#+END_SRC
** Minions
   Спрятать минорные режимы
   #+BEGIN_SRC emacs-lisp
	 (use-package minions
	   :config (minions-mode t))
   #+END_SRC
** Flycheck
   Проверка синтаксиса
   #+BEGIN_SRC emacs-lisp
	 (use-package flycheck
		 :hook (prog-mode . flycheck-mode))
   #+END_SRC
** Treemacs
   Дерево проектов
   #+BEGIN_SRC emacs-lisp
      (use-package treemacs
	:defer t
	:bind ("C-c t"   . treemacs)
	:config (treemacs-git-mode 'deferred))
   #+END_SRC
*** Treemacs-magit
	Связь treemacs и magit
    #+BEGIN_SRC emacs-lisp
      (use-package treemacs-magit
	:after (treemacs magit))
    #+END_SRC
** Comment-tags
   Подсветка и навигация по TODO комментариям.
   #+BEGIN_SRC emacs-lisp
	 (use-package comment-tags
	   :hook (prog-mode . comment-tags-mode)
	   :custom (comment-tags-keymap-prefix (kbd "C-c #"))
	   (comment-tags-keyword-faces
			 `(("TODO" . ,(list :weight 'bold :foreground "#28ABE3"))
			   ("FIXME" . ,(list :weight 'bold :foreground "#DB3340"))
			   ("BUG" . ,(list :weight 'bold :foreground "#DB3340"))
			   ("HACK" . ,(list :weight 'bold :foreground "#E8B71A"))
			   ("KLUDGE" . ,(list :weight 'bold :foreground "#E8B71A"))
			   ("XXX" . ,(list :weight 'bold :foreground "#F7EAC8"))
			   ("INFO" . ,(list :weight 'bold :foreground "#F7EAC8"))
			   ("DONE" . ,(list :weight 'bold :foreground "#1FDA9A")))))
   #+END_SRC
** Magit
   Интерфейс для взаимодействия с git
   #+BEGIN_SRC emacs-lisp
	 (use-package magit
		 :commands magit-status)
   #+END_SRC
** Company
   Автодополнение
   #+BEGIN_SRC emacs-lisp
     (use-package company
       :defer t
       :hook (prog-mode . company-mode)
       :custom (company-ide-delay 0)
       (company-minimum-prefix-length 1)
       (company-selection-wrap-around t))
   #+END_SRC
** Which-key
   Подсказка биндов после нажатия C-x
   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :defer t
       :config (which-key-mode)
       :custom (which-key-idle-delay 1))
   #+END_SRC
** Projectile
   Навигация по проектам которые содержат системы контроля версий
   либо файл .projectile
   #+BEGIN_SRC emacs-lisp
     (use-package projectile
       :defer t
       :config (projectile-mode +1)
       :bind-keymap ("C-c p" . projectile-command-map))
   #+END_SRC
** Tramp
   Использование данной конфигурации emacs 
   для доступа к удалённым серверам
   #+BEGIN_SRC emacs-lisp
     (use-package tramp
       :defer t
       :init (setq tramp-default-method "ssh"))
   #+END_SRC
* Другие настройки
  Менее важные настройки
** Общий буфер обмена
   #+BEGIN_SRC emacs-lisp
   (setq x-select-enable-clipboard t)
   #+END_SRC
** COMMENT Проверка ошибок
   #+BEGIN_SRC emacs-lisp
	 (add-hook 'text-mode-hook #'flyspell-mode)
	 (with-eval-after-load "ispell"
		 (setq ispell-program-name "hunspell")
		 (ispell-set-spellchecker-params)
		 (ispell-hunspell-add-multi-dic "en_US,ru_RU")
		 (setq ispell-dictionary "en_US,ru_RU")
		 (setq ispell-personal-dictionary "~/.hunspell_personal")
		 )
   #+END_SRC
** Кастомные бинды
   #+BEGIN_SRC emacs-lisp
	 (global-set-key (kbd "C-x O") 'window-swap-states)
   #+END_SRC
